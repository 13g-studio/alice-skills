import copy
import json
import logging
import random
import sqlite3
from flask import Flask, request, render_template
from portrait import portraits, hash_pass, unhash_pass

# –Ω–µ —É–¥–∞–ª—è–π—Ç–µ —ç—Ç–æ—Ç –ø—É—Ç—å —Ç.–∫. —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º data.json
# with open('C:/Users/Daniel/dev/github/alice-skills/Data.json', encoding='utf8') as f:
# –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –≤–∞—Å:
with open('Data.json', encoding='utf8') as f:
    data = json.loads(f.read())['test']  # –º–∞—Å—Å–∏–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞—Ç
with open('Data.json', encoding='utf8') as f:
    terms = json.loads(f.read())['terms']  # same –∏–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
sessionStorage = {}

x = hash_pass('Hello')
# print(x)
# print(unhash_pass(x, 'Hello'))

# —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
right = ['–û—Ç–ª–∏—á–Ω–æ!', '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!', '–°—É–ø–µ—Ä!', '–¢–æ—á–Ω–æ!', '–í–µ—Ä–Ω–æ!', '–•–æ—Ä–æ—à–æ!', '–ù–µ–ø–ª–æ—Ö–æ!']

wrong = ['–û–π!', '–ù–µ —Ç–æ!', '–¢—ã –æ—à–∏–±—Å—è!', '–ù–µ–º–Ω–æ–≥–æ –Ω–µ —Ç–æ!', '–ù–µ–≤–µ—Ä–Ω–æ!', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!', '–û—à–∏–±–æ—á–∫–∞!']

_next = ['–î–∞–ª–µ–µ', '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', '–ü—Ä–æ–¥–æ–ª–∂–∏–º', '–°–ª–µ–¥—É—é—â–µ–µ']

wtf = ['–ü—Ä–æ—Å—Ç–∏, –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è', '–ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?', '–ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–ü—Ä–æ—Å—Ç–∏, –Ω–µ —Å–ª—ã—à—É —Ç–µ–±—è']


@app.route('/records')
def records():
    con = sqlite3.connect("users.db")
    cur = con.cursor()
    persons = cur.execute("SELECT * FROM u").fetchall()
    persons = sorted(persons, key=lambda x: -x[-1])
    return render_template('records.html', title='–†–µ–∫–æ—Ä–¥—ã | –ï–ì–≠', persons=persons)


@app.route('/post', methods=['POST'])
def main():
    logging.info('Request: %r', request.json)
    response = {
        'session': request.json['session'],
        'version': request.json['version'],
        'response': {
            'end_session': False
        },
    }
    handle_dialog(request.json, response)

    logging.info('Response: %r', request.json)

    return json.dumps(response)


def handle_dialog(req, res):

    user_id = req['session']['user_id']
    # –µ—Å–ª–∏ 1 —Ä–∞–∑
    if req['session']['new']:

        # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –¥–∞—Ç –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤
        arr = copy.deepcopy(data)
        term = copy.deepcopy(terms)
        random.shuffle(arr)
        random.shuffle(term)
        sessionStorage[user_id] = {
            'suggests': [
                "–î–∞—Ç—ã üï∞",
                "–ö–∞—Ä—Ç–∏–Ω—ã üåÑ",
                "–¢–µ—Ä–º–∏–Ω—ã üìö",
                "–†–µ–π—Ç–∏–Ω–≥ üèÜ",
                "–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå"
            ],
            'slicedsuggests': [
                "–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå",
                "–ú–µ–Ω—é"
            ],
            "nick": None,
            'id': 0,
            'mode': '',
            'lastPic': False,
            # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞—Ç
            'test': arr,
            'lastQ': False,

            # –æ—á–∫–∏ –¥–ª—è –ë–î
            'test_count': 0,
            'pic_count': 0,
            'ter_count': 0,

            # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤
            'term': term,
            'lastT': False,
            'terID': 0
        }
        res['response']['text'] = '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ ‚ú®\n ' \
                                  '–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:'
        return

    if sessionStorage[user_id]['nick'] is None:
        tag = str(random.randint(0, 10001))
        sessionStorage[user_id]['nick'] = req['request']['original_utterance'] + "#" + tag
        res['response']['text'] = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n' \
                                  '–Ø –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É —Ç–µ–±—è —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É, –∫–∞—Ä—Ç–∏–Ω—É –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω. ' \
                                  '–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—á–∫–∏, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω! üòÅ'
        res['response']['buttons'] = [
            {'title': suggest, 'hide': False}
            for suggest in sessionStorage[user_id]['suggests']
        ]
        return

    if '–º–µ–Ω—é' in req['request']['original_utterance'].lower():
        res['response']['text'] = '–Ø –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É —Ç–µ–±—è —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É, –∫–∞—Ä—Ç–∏–Ω—É –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω. ' \
                                  '–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—á–∫–∏, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω! üòÅ'
        sessionStorage[user_id]['lastQ'] = False
        sessionStorage[user_id]['lastPic'] = False
        sessionStorage[user_id]['lastT'] = False
        res['response']['buttons'] = [
            {'title': suggest, 'hide': False}
            for suggest in sessionStorage[user_id]['suggests']
        ]
        return

        # —Å—Ç–∞–≤–∏–º —Ä–µ–∂–∏–º
    if '–¥–∞—Ç—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã'

    if '–∫–∞—Ä—Ç–∏–Ω—ã' in req['request']['original_utterance'].lower() or '–ø–æ—Ç—Ä–µ—Ç—ã' in req['request'][
        'original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–∫–∞—Ä—Ç–∏–Ω—ã'

    if '—Ç–µ—Ä–º–∏–Ω—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Ç–µ—Ä–º–∏–Ω—ã'

    # –µ—Å–ª–∏ –≤ –Ω–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ '–∑–∞–∫—Ä—ã—Ç—å' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    if '–∑–∞–∫—Ä—ã—Ç—å' in req['request']['original_utterance'].lower():
        con = sqlite3.connect("users.db")
        cur = con.cursor()  # –í–æ—Ç —Ç—É—Ç –±—É–¥–µ–º –∑–∞–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        test_count = sessionStorage[user_id]['test_count']
        pic_count = sessionStorage[user_id]['pic_count']
        ter_count = sessionStorage[user_id]['ter_count']
        id_ = len(cur.execute("SELECT * FROM u").fetchall())
        cur.execute("INSERT INTO u VALUES (?,?,?,?,?,?);",
                    (
                        id_ + 1,
                        sessionStorage[user_id]['nick'],  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–º–µ–Ω–∏
                        test_count,
                        pic_count,
                        ter_count,
                        test_count + pic_count + ter_count
                    )
                    )
        con.commit()
        res['response']['text'] = '–ü–æ–∫–∞!'
        res['response']['end_session'] = True
        return

    if sessionStorage[user_id]['mode'] == '—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã':
        if not sessionStorage[user_id]['lastQ']:
            res['response']['text'] = sessionStorage[user_id]['test'][sessionStorage[user_id]['id']]['question']
            sessionStorage[user_id]['lastQ'] = True
        else:
            res['response']['text'] = sessionStorage[user_id]['test'][sessionStorage[user_id]['id']]['question']
            if sessionStorage[user_id]['test'][sessionStorage[user_id]['id'] - 1][
                'answer'].lower() in req['request']['original_utterance'].lower():
                res['response']['text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                sessionStorage[user_id]['test_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ –¥–∞—Ç–∞–º
            else:
                res['response'][
                    'text'] = f"{random.choice(wrong)} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {sessionStorage[user_id]['test'][sessionStorage[user_id]['id'] - 1]['answer']}. \n{random.choice(_next)}: {res['response']['text']}"

        sessionStorage[user_id]['id'] += 1

    elif sessionStorage[user_id]['mode'] == '–∫–∞—Ä—Ç–∏–Ω—ã':
        if not sessionStorage[user_id]['lastPic']:
            sessionStorage[user_id]['arrayPic'] = list(portraits)
            random.shuffle(sessionStorage[user_id]['arrayPic'])
            sessionStorage[user_id]['idPic'] = 0
            res['response']['card'] = {}
            res['response']['card']['type'] = 'BigImage'
            res['response']['card']['title'] = '–ö—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?'
            res['response']['card']['image_id'] = \
                portraits.get(sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic']])
            sessionStorage[user_id]['lastPic'] = True
        else:
            res['response']['card'] = {}
            res['response']['card']['type'] = 'BigImage'
            if sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic'] - 1].lower() \
                    in req['request']['original_utterance'].lower():
                res['response']['card']['title'] = random.choice(right)
                sessionStorage[user_id]['pic_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
            else:
                res['response']['card']['title'] \
                    = f"{random.choice(wrong)} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic'] - 1]}."

            if sessionStorage[user_id]['idPic'] == len(sessionStorage[user_id]['arrayPic']):
                random.shuffle(sessionStorage[user_id]['arrayPic'])
                sessionStorage[user_id]['idPic'] = 0
            res['response']['card']['image_id'] = \
                portraits.get(sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic']])
            res['response']['card']['title'] += ' –ö—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?'
        res['response']['text'] = ''
        sessionStorage[user_id]['idPic'] += 1

    elif sessionStorage[user_id]['mode'] == '—Ç–µ—Ä–º–∏–Ω—ã':
        if not sessionStorage[user_id]['lastT']:
            res['response']['text'] = sessionStorage[user_id]['term'][sessionStorage[user_id]['terID']]['question']
            sessionStorage[user_id]['lastT'] = True
        else:
            res['response']['text'] = sessionStorage[user_id]['term'][sessionStorage[user_id]['terID']]['question']
            if sessionStorage[user_id]['term'][sessionStorage[user_id]['terID'] - 1][
                'answer'].lower() in req['request']['original_utterance'].lower():
                res['response']['text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                sessionStorage[user_id]['ter_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º
            else:
                res['response'][
                    'text'] = f"{random.choice(wrong)} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {sessionStorage[user_id]['term'][sessionStorage[user_id]['terID'] - 1]['answer']}. \n{random.choice(_next)}: {res['response']['text']}"
        sessionStorage[user_id]['terID'] += 1

    else:
        res['response']['buttons'] = [
            {'title': suggest, 'hide': False}
            for suggest in sessionStorage[user_id]['suggests']
        ]
        res['response']['text'] = f"{random.choice(wtf)}\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö :)"
        return

    res['response']['buttons'] = [
        {'title': suggest, 'hide': True}
        for suggest in sessionStorage[user_id]['slicedsuggests']
    ]


if __name__ == '__main__':
    app.run(host="127.0.0.1", port=8080)
