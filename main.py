import copy
import json
import logging
import random
import sqlite3
from flask import Flask, request, render_template
from portrait import portraits, hash_pass, unhash_pass

# –Ω–µ —É–¥–∞–ª—è–π—Ç–µ —ç—Ç–æ—Ç –ø—É—Ç—å —Ç.–∫. —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º data.json
# with open('C:/Users/Daniel/dev/github/alice-skills/Data.json', encoding='utf8') as f:
# –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –≤–∞—Å:
with open('Data.json', encoding='utf8') as f:
    data = json.loads(f.read())['test']  # –º–∞—Å—Å–∏–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞—Ç
with open('Data.json', encoding='utf8') as f:
    terms = json.loads(f.read())['terms']  # same –∏–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤

app = Flask(__name__)
logging.basicConfig(
    filename='example.log',
    format='%(asctime)s %(name)s %(message)s',
    level=logging.INFO
)

sessionStorage = {}
x = hash_pass('Hello')
# print(x)
# print(unhash_pass(x, 'Hello'))

# —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
right = ['–û—Ç–ª–∏—á–Ω–æ!', '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!', '–°—É–ø–µ—Ä!', '–¢–æ—á–Ω–æ!', '–í–µ—Ä–Ω–æ!', '–•–æ—Ä–æ—à–æ!', '–ù–µ–ø–ª–æ—Ö–æ!']

wrong = ['–û–π!', '–ù–µ —Ç–æ!', '–¢—ã –æ—à–∏–±—Å—è!', '–ù–µ–º–Ω–æ–≥–æ –Ω–µ —Ç–æ!', '–ù–µ–≤–µ—Ä–Ω–æ!', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!', '–û—à–∏–±–æ—á–∫–∞!']

_next = ['–î–∞–ª–µ–µ', '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', '–ü—Ä–æ–¥–æ–ª–∂–∏–º', '–°–ª–µ–¥—É—é—â–µ–µ']

wtf = ['–ü—Ä–æ—Å—Ç–∏, –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è', '–ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?', '–ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–ü—Ä–æ—Å—Ç–∏, –Ω–µ —Å–ª—ã—à—É —Ç–µ–±—è']

goodbye = ['–ü–æ–∫–∞!', '–î–æ –≤—Å—Ç—Ä–µ—á–∏!', '–ë—É–¥–µ–º –Ω–∞ —Å–≤—è–∑–∏!', '–†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è!', '–ü–æ–∫–∞-–ø–æ–∫–∞!']

hey = ['–ü—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è', '–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è', '–•–æ—Ä–æ—à–æ, —á—Ç–æ –º—ã —Å–Ω–æ–≤–∞ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å', '–ü—Ä–∏–≤–µ—Ç–∏–∫',
       '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π']


def config(user_id):
    # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –¥–∞—Ç –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤
    arr = copy.deepcopy(data)
    term = copy.deepcopy(terms)
    random.shuffle(arr)
    random.shuffle(term)
    sessionStorage[user_id] = {
        'suggests': [
            "–î–∞—Ç—ã üï∞",
            "–ö–∞—Ä—Ç–∏–Ω—ã üåÑ",
            "–¢–µ—Ä–º–∏–Ω—ã üìö",
            "–†–µ—Å—É—Ä—Å—ã üìé",
            "–†–µ–π—Ç–∏–Ω–≥ üèÜ",
            "–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå"
        ],
        'slicedsuggests': [
            "–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå",
            "–ú–µ–Ω—é"
        ],
        "nick": None,
        'id': 0,
        'mode': '',
        'lastPic': False,
        # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞—Ç
        'test': arr,
        'lastQ': False,

        # –æ—á–∫–∏ –¥–ª—è –ë–î
        'test_count': 0,
        'pic_count': 0,
        'ter_count': 0,

        # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤
        'term': term,
        'lastT': False,
        'terID': 0
    }


def write_in_base(user_id):
    con = sqlite3.connect("users.db")
    cur = con.cursor()  # –í–æ—Ç —Ç—É—Ç –±—É–¥–µ–º –∑–∞–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    test_count = sessionStorage[user_id]['test_count']
    pic_count = sessionStorage[user_id]['pic_count']
    ter_count = sessionStorage[user_id]['ter_count']
    cur.execute(f"SELECT * FROM u WHERE nick = '{sessionStorage[user_id]['nick']}';")
    if cur.fetchone() is None:
        id_ = len(cur.execute("SELECT * FROM u").fetchall())
        cur.execute("INSERT INTO u VALUES (?,?,?,?,?,?);",
                    (
                        id_ + 1,
                        sessionStorage[user_id]['nick'],  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–º–µ–Ω–∏
                        test_count,
                        pic_count,
                        ter_count,
                        test_count + pic_count + ter_count
                    )
                    )
    else:
        cur.execute("UPDATE u SET (date_count, pic_count, ter_count, summa) = (?,?,?,?) WHERE nick = ?;",
                    (
                        test_count,
                        pic_count,
                        ter_count,
                        test_count + pic_count + ter_count,
                        sessionStorage[user_id]['nick']
                    )
                    )
    con.commit()


@app.route('/records')
def records():
    con = sqlite3.connect("users.db")
    cur = con.cursor()
    persons = cur.execute("SELECT * FROM u").fetchall()
    persons = sorted(persons, key=lambda x: -x[-1])
    return render_template('records.html', title='–†–µ–∫–æ—Ä–¥—ã | –ï–ì–≠', persons=persons)


@app.route('/post', methods=['POST'])
def main():
    logging.info('REQUEST: %r', request.json)
    logging.info('\n')
    response = {
        'session': request.json['session'],
        'version': request.json['version'],
        'response': {
            'end_session': False
        },
    }
    if 'screen' in request.json['meta']['interfaces']:
        handle_dialog(request.json, response)
    # if not 'screen' in request.json['meta']['interfaces']:
    #     station_dialog(request.json, response)
    logging.info('RESPONSE: %r', request.json)
    logging.info('\n\n')

    return json.dumps(response)


def handle_dialog(req, res):
    user_id = req['session']['user_id']
    if res['response']['end_session'] is True:
        write_in_base(user_id)
    if req['session']['new']:
        config(user_id)
        try:
            con = sqlite3.connect("users.db")
            cur = con.cursor()
            user = cur.execute(f"SELECT * FROM u WHERE nick = '{req['state']['user']['nick']}';").fetchone()

            res['response']['text'] = \
                f"{random.choice(hey)}, {req['state']['user']['nick']}! –ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! " \
                f"–¢–≤–æ–∏ –æ—á–∫–∏:\n–î–∞—Ç—ã: {user[2]}\n–ö–∞—Ä—Ç–∏–Ω—ã: {user[3]}\n–¢–µ—Ä–º–∏–Ω—ã: {user[4]}."
            sessionStorage[user_id]['nick'] = req['state']['user']['nick']
            sessionStorage[user_id]['test_count'] = user[2]
            sessionStorage[user_id]['pic_count'] = user[3]
            sessionStorage[user_id]['ter_count'] = user[4]

            res['response']['buttons'] = [
                {'title': suggest, 'hide': False}
                for suggest in sessionStorage[user_id]['suggests'][:4]
            ]
            res['response']['buttons'].append({'title': '–†–µ–π—Ç–∏–Ω–≥ üèÜ', 'hide': False,
                                               'url': 'https://alice-skills-1--t1logy.repl.co/records'})
            res['response']['buttons'].append({'title': '–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå', 'hide': False})

        except Exception:
            res['response']['text'] = '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ ‚ú®\n ' \
                                      '–ù–∞–ø–∏—à–∏ –∏–ª–∏ —Å–∫–∞–∂–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:'
        return

    if sessionStorage[user_id]['nick'] is None:
        tag = str(random.randint(0, 10001))
        sessionStorage[user_id]['nick'] = req['request']['original_utterance'] + "#" + tag
        res['response']['text'] = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n' \
                                  '–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏—Ö.' \
                                  '–ù–µ –∑–∞–±—ã–≤–∞–π, —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω! üòÅ'
        res['response']['buttons'] = [
            {'title': suggest, 'hide': False}
            for suggest in sessionStorage[user_id]['suggests'][:4]
        ]
        res['response']['buttons'].append({'title': '–†–µ–π—Ç–∏–Ω–≥ üèÜ', 'hide': False,
                                           'url': 'https://alice-skills-1--t1logy.repl.co/records'})
        res['response']['buttons'].append({'title': '–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå', 'hide': False})

        return

    if '–º–µ–Ω—é' in req['request']['original_utterance'].lower() or \
            '—Ä–µ–π—Ç–∏–Ω–≥' in req['request']['original_utterance'].lower() or '–ø–æ–º–æ—â—å' in req['request']['original_utterance'].lower() or '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å' in req['request']['original_utterance'].lower():
        res['response']['text'] = '–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏—Ö. ' \
                                  '–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—á–∫–∏, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω! üòÅ'
        sessionStorage[user_id]['lastQ'] = False
        sessionStorage[user_id]['lastPic'] = False
        sessionStorage[user_id]['lastT'] = False
        res['response']['buttons'] = [
            {'title': suggest, 'hide': False}
            for suggest in sessionStorage[user_id]['suggests'][:4]
        ]
        res['response']['buttons'].append({'title': '–†–µ–π—Ç–∏–Ω–≥ üèÜ', 'hide': False,
                                           'url': 'https://alice-skills-1--t1logy.repl.co/records'})
        res['response']['buttons'].append({'title': '–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå', 'hide': False})
        return

        # —Å—Ç–∞–≤–∏–º —Ä–µ–∂–∏–º
    if '—Ä–µ—Å—É—Ä—Å—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Ä–µ—Å—É—Ä—Å—ã'

    if '–¥–∞—Ç—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã'

    if '–∫–∞—Ä—Ç–∏–Ω—ã' in req['request']['original_utterance'].lower() or '–ø–æ—Ç—Ä–µ—Ç—ã' in req['request'][
        'original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–∫–∞—Ä—Ç–∏–Ω—ã'

    if '—Ç–µ—Ä–º–∏–Ω—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Ç–µ—Ä–º–∏–Ω—ã'

    # –µ—Å–ª–∏ –≤ –Ω–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ '–∑–∞–∫—Ä—ã—Ç—å' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    if '–∑–∞–∫—Ä—ã—Ç—å' in req['request']['original_utterance'].lower():
        write_in_base(user_id)
        res['response']['text'] = random.choice(
            goodbye) + '\n–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –ø–æ—Å—Ç–∞–≤—å –Ω–∞–º –∑–≤—ë–∑–¥–æ—á–∫–∏ üëá. –°–ø–∞—Å–∏–±–æ :) –ò –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!'
        res['response']['buttons'] = [{
            'title': '–ó–≤—ë–∑–¥–æ—á–∫–∏ ‚≠êÔ∏è',
            'hide': False,
            'url': 'https://dialogs.yandex.ru/store/skills/1424e7f5-ege-po-istorii'
        },
            {
                'title': '–†–µ–π—Ç–∏–Ω–≥ üèÜ',
                'hide': False,
                'url': 'https://alice-skills-1--t1logy.repl.co/records'
            }
        ]
        res['response']['end_session'] = True
        res['user_state_update'] = {
            'nick': sessionStorage[user_id]['nick']
        }
        # config(user_id) # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—Ç –∑–∞–Ω–æ–≤–æ –∏–≥—Ä–∞—Ç—å –ë–ï–ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–≤—ã–∫–∞
        return

    if sessionStorage[user_id]['mode'] == '—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã':
        if not sessionStorage[user_id]['lastQ']:
            res['response']['text'] = sessionStorage[user_id]['test'][sessionStorage[user_id]['id']]['question']
            sessionStorage[user_id]['lastQ'] = True
        else:
            res['response']['text'] = sessionStorage[user_id]['test'][sessionStorage[user_id]['id']]['question']
            user_answer = req['request']['command'].lower().split(' ')
            right_answer = sessionStorage[user_id]['test'][sessionStorage[user_id]['id'] - 1]['answer'].lower().split(
                ' ')

            print(right_answer)
            print(user_answer)
            if len(right_answer) > 1:  # –µ—Å–ª–∏ —É –Ω–∞—Å 2 –≥–æ–¥–∞
                if right_answer[0] in user_answer and right_answer[1] in user_answer:
                    res['response'][
                        'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                    sessionStorage[user_id]['test_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ –¥–∞—Ç–∞–º
                    write_in_base(user_id)
                else:
                    res['response'][
                        'text'] = f"{random.choice(wrong)} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –≤ {right_answer[0]}-{right_answer[1]} –≥–≥. \n{random.choice(_next)}: {res['response']['text']}"
            else:  # –µ—Å–ª–∏ 1 –≥–æ–¥
                if right_answer[0] in user_answer:
                    res['response'][
                        'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                    sessionStorage[user_id]['test_count'] += 1
                    write_in_base(user_id)
                else:
                    res['response'][
                        'text'] = f"{random.choice(wrong)} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –≤ {right_answer[0]} –≥. \n{random.choice(_next)}: {res['response']['text']}"
        sessionStorage[user_id]['id'] += 1

    elif sessionStorage[user_id]['mode'] == '–∫–∞—Ä—Ç–∏–Ω—ã':
        if not sessionStorage[user_id]['lastPic']:
            sessionStorage[user_id]['arrayPic'] = list(portraits)
            random.shuffle(sessionStorage[user_id]['arrayPic'])
            sessionStorage[user_id]['idPic'] = 0
            res['response']['card'] = {}
            res['response']['card']['type'] = 'BigImage'
            res['response']['card']['title'] = '–ö—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?'
            res['response']['card']['image_id'] = \
                portraits.get(sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic']])
            sessionStorage[user_id]['lastPic'] = True
        else:
            res['response']['card'] = {}
            res['response']['card']['type'] = 'BigImage'
            for ans in sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic'] - 1].lower().split('/'):
                if ans in req['request']['original_utterance'].lower():
                    res['response']['card']['title'] = random.choice(right)
                    sessionStorage[user_id]['pic_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
                    write_in_base(user_id)
                    break
            else:
                res['response']['card']['title'] \
                    = f"{random.choice(wrong)} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic'] - 1]}."

            if sessionStorage[user_id]['idPic'] == len(sessionStorage[user_id]['arrayPic']):
                random.shuffle(sessionStorage[user_id]['arrayPic'])
                sessionStorage[user_id]['idPic'] = 0
            res['response']['card']['image_id'] = \
                portraits.get(sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic']])
            res['response']['card']['title'] += ' –ö—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?'
        res['response']['text'] = res['response']['card']['title']
        sessionStorage[user_id]['idPic'] += 1

    elif sessionStorage[user_id]['mode'] == '—Ç–µ—Ä–º–∏–Ω—ã':
        if not sessionStorage[user_id]['lastT']:
            res['response']['text'] = sessionStorage[user_id]['term'][sessionStorage[user_id]['terID']]['question']
            sessionStorage[user_id]['lastT'] = True
        else:
            res['response']['text'] = sessionStorage[user_id]['term'][sessionStorage[user_id]['terID']]['question']
            if req['request']['original_utterance'].lower() in sessionStorage[user_id]['term'][
                sessionStorage[user_id]['terID'] - 1]['answer'].lower():
                res['response']['text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                sessionStorage[user_id]['ter_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º
                write_in_base(user_id)
            else:
                res['response'][
                    'text'] = f"{random.choice(wrong)} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {sessionStorage[user_id]['term'][sessionStorage[user_id]['terID'] - 1]['answer']}. \n{random.choice(_next)}: {res['response']['text']}"
        sessionStorage[user_id]['terID'] += 1
    elif sessionStorage[user_id]['mode'] == '—Ä–µ—Å—É—Ä—Å—ã':
        res['response']['text'] = '–ó–¥–µ—Å—å –º—ã –ø—É–±–ª–∏–∫—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ü–æ—Å–ª—É—à–∞–µ–º –º—É–∑—ã–∫—É –∏–ª–∏ –ø–æ—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—å–∏?'
        res['response']['buttons'] = [{
            'title': '–°—Ç–∞—Ç—å–∏Ô∏è üìñ',
            'hide': False,
        },
            {
                'title': '–ú—É–∑—ã–∫–∞ üéµ',
                'hide': False,
            }
        ]
        if '–º—É–∑—ã–∫–∞' in req['request']['original_utterance'].lower() or '–º—É–∑—ã–∫—É' in req['request'][
            'original_utterance'].lower():
            res['response']['tts'] = "–í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –º—É–∑—ã–∫–∏"
            res['response']['card'] = {
                "type": "ItemsList",
                "header": {
                    "text": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞",
                },
                "items": [
                    {
                        "image_id": "937455/3a9025e4d08f2c295d85",
                        "title": "–•–∏—Ç—ã –°–°–°–†",
                        "description": "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ",
                        "button": {
                            "url":
                                'https://music.yandex.ru/users/sctnStudio/playlists/1002'
                        }
                    },
                    {
                        "image_id": "1521359/94ab576717d5217f7fdb",
                        "title": "–ì–∏–º–Ω—ã —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞",
                        "description": "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ",
                        "button": {
                            "url": 'https://music.yandex.ru/users/sctnStudio/playlists/1004'
                        }
                    },
                    {
                        "image_id": "965417/aa2cbef4a55c41b57322",
                        "title": "–í–æ–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏",
                        "description": "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ",
                        "button": {
                            "url": 'https://music.yandex.ru/users/sctnStudio/playlists/1001'
                        }
                    }
                ]
            }
        if '—Å—Ç–∞—Ç—å–∏' in req['request']['original_utterance'].lower():
            res['response']['tts'] = "–í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∞ –∫–ª–∞—Å—Å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞—Ç–µ–π"
            res['response']['card'] = {
                "type": "ItemsList",
                "header": {
                    "text": "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏",
                },
                "items": [
                    {
                        # "image_id": "937455/3a9025e4d08f2c295d85",
                        "title": "13 –ª—É—á—à–∏—Ö –∫–Ω–∏–≥ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏",
                        "description": "–ò—Å—Ç–æ—á–Ω–∏–∫: Lifehacker.ru",
                        "button": {
                            "url": 'https://lifehacker.ru/knigi-po-istorii/'
                        }
                    },
                    {
                        # "image_id": "1521359/94ab576717d5217f7fdb",
                        "title": "–°–æ–≤–µ—Ç—ã –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏",
                        "description": "–ò—Å—Ç–æ—á–Ω–∏–∫: –£—á—ë–±–∞.—Ä—É",
                        "button": {
                            "url": 'https://www.ucheba.ru/for-abiturients/ege/articles/history'
                        }
                    },
                    {
                        # "image_id": "965417/aa2cbef4a55c41b57322",
                        "title": "–ü–∞–º—è—Ç–∫–∏ –∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏",
                        "description": "–ò—Å—Ç–æ—á–Ω–∏–∫: historystepa.ru",
                        "button": {
                            "url": 'http://historystepa.ru/'
                        }
                    }
                ]
            }
    else:
        res['response']['buttons'] = [
            {'title': suggest, 'hide': False}
            for suggest in sessionStorage[user_id]['suggests'][:4]
        ]
        res['response']['buttons'].append({'title': '–†–µ–π—Ç–∏–Ω–≥ üèÜ', 'hide': False,
                                           'url': 'https://alice-skills-1--t1logy.repl.co/records'})
        res['response']['buttons'].append({'title': '–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå', 'hide': False})
        res['response']['text'] = f"{random.choice(wtf)}\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö :)"
        return

    res['response']['buttons'] = [
        {'title': suggest, 'hide': True}
        for suggest in sessionStorage[user_id]['slicedsuggests']
    ]


def station_dialog(req, res):
    user_id = req['session']['user_id']
    if res['response']['end_session'] is True:
        write_in_base(user_id)
    if req['session']['new']:
        config(user_id)
        try:
            con = sqlite3.connect("users.db")
            cur = con.cursor()
            user = cur.execute(f"SELECT * FROM u WHERE nick = '{req['state']['user']['nick']}';").fetchone()

            res['response']['text'] = \
                f"{random.choice(hey)}, {req['state']['user']['nick']}! –ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ç—ã –º–æ–∂–µ—à—å " \
                f"—Å–∫–∞–∑–∞—Ç—å: –∑–∞–∫—Ä—ã—Ç—å, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä." \
                f"\n–í –∫–∞–∫–æ–π —Ä–µ–∂–∏–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å: –¥–∞—Ç—ã –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω—ã?"

            sessionStorage[user_id]['nick'] = req['state']['user']['nick']
            sessionStorage[user_id]['test_count'] = user[2]
            sessionStorage[user_id]['ter_count'] = user[4]

        except Exception:
            res['response']['text'] = '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ ‚ú®\n ' \
                                      '–°–∫–∞–∂–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:'
        return

    if sessionStorage[user_id]['nick'] is None:
        tag = str(random.randint(0, 10001))
        sessionStorage[user_id]['nick'] = req['request']['original_utterance'] + "#" + tag
        res['response']['text'] = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n' \
                                  ' –í –∫–∞–∫–æ–π —Ä–µ–∂–∏–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å: –¥–∞—Ç—ã –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω—ã?' \
                                  ' –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—á–∫–∏, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω! –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä: –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ –∑–∞–∫—Ä—ã—Ç—å'
        return
    if '–ø–æ–º–æ—â—å' in req['request']['original_utterance'].lower() or '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å' in req['request']['original_utterance'].lower() or '–º–µ–Ω—é' in req['request']['original_utterance'].lower():
        res['response']['text'] = '–ù–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –±–µ–∑ —ç–∫—Ä–∞–Ω–∞ —É –º–µ–Ω—è –µ—Å—Ç—å 2 —Ä–µ–∂–∏–º–∞: –¥–∞—Ç—ã –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω—ã. –í –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –ø–æ–∏–≥—Ä–∞–µ–º?'
        sessionStorage[user_id]['lastQ'] = False
        sessionStorage[user_id]['lastT'] = False
    if '–¥–∞—Ç—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã'
    if '—Ç–µ—Ä–º–∏–Ω—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Ç–µ—Ä–º–∏–Ω—ã'
    if '–∑–∞–∫—Ä—ã—Ç—å' in req['request']['original_utterance'].lower():
        write_in_base(user_id)
        res['response']['text'] = random.choice(
            goodbye) + '\n–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –ø–æ—Å—Ç–∞–≤—å –Ω–∞–º –∑–≤—ë–∑–¥–æ—á–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ –î–∏–∞–ª–æ–≥–æ–≤. –°–ø–∞—Å–∏–±–æ :)'
        res['response']['end_session'] = True
        res['user_state_update'] = {
            'nick': sessionStorage[user_id]['nick']
        }
        # config(user_id) # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—Ç –∑–∞–Ω–æ–≤–æ –∏–≥—Ä–∞—Ç—å –ë–ï–ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–≤—ã–∫–∞
        return

    if sessionStorage[user_id]['mode'] == '—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã':
        if not sessionStorage[user_id]['lastQ']:
            res['response']['text'] = sessionStorage[user_id]['test'][sessionStorage[user_id]['id']]['question']
            sessionStorage[user_id]['lastQ'] = True
        else:
            res['response']['text'] = sessionStorage[user_id]['test'][sessionStorage[user_id]['id']]['question']
            user_answer = req['request']['command'].lower().split(' ')
            right_answer = sessionStorage[user_id]['test'][sessionStorage[user_id]['id'] - 1]['answer'].lower().split(
                ' ')
            if len(right_answer) > 1:  # –µ—Å–ª–∏ —É –Ω–∞—Å 2 –≥–æ–¥–∞
                if right_answer[0] in user_answer and right_answer[1] in user_answer:
                    res['response'][
                        'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                    sessionStorage[user_id]['test_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ –¥–∞—Ç–∞–º
                    write_in_base(user_id)
                else:
                    res['response'][
                        'text'] = f"{random.choice(wrong)} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –≤ {right_answer[0]}-{right_answer[1]} –≥–≥. \n{random.choice(_next)}: {res['response']['text']}"
            else:  # –µ—Å–ª–∏ 1 –≥–æ–¥
                if right_answer[0] in user_answer:
                    res['response'][
                        'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                    sessionStorage[user_id]['test_count'] += 1
                    write_in_base(user_id)
                else:
                    res['response'][
                        'text'] = f"{random.choice(wrong)} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –≤ {right_answer[0]} –≥. \n{random.choice(_next)}: {res['response']['text']}"
        sessionStorage[user_id]['id'] += 1


    elif sessionStorage[user_id]['mode'] == '—Ç–µ—Ä–º–∏–Ω—ã':
        if not sessionStorage[user_id]['lastT']:
            res['response']['text'] = sessionStorage[user_id]['term'][sessionStorage[user_id]['terID']]['question']
            sessionStorage[user_id]['lastT'] = True
        else:
            res['response']['text'] = sessionStorage[user_id]['term'][sessionStorage[user_id]['terID']]['question']
            if req['request']['original_utterance'].lower() in sessionStorage[user_id]['term'][
                sessionStorage[user_id]['terID'] - 1]['answer'].lower():
                res['response']['text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                sessionStorage[user_id]['ter_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º
                write_in_base(user_id)
            else:
                res['response'][
                    'text'] = f"{random.choice(wrong)} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {sessionStorage[user_id]['term'][sessionStorage[user_id]['terID'] - 1]['answer']}. \n{random.choice(_next)}: {res['response']['text']}"
        sessionStorage[user_id]['terID'] += 1
    else:
      res['response']['text'] = '–ù–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –±–µ–∑ —ç–∫—Ä–∞–Ω–∞ —É –º–µ–Ω—è –µ—Å—Ç—å 2 —Ä–µ–∂–∏–º–∞: –¥–∞—Ç—ã –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω—ã. –í –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –ø–æ–∏–≥—Ä–∞–µ–º?'  

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8080)
