import copy
import json
import logging
import random
from threading import Thread

import psycopg2
from flask import Flask, request, render_template

from portrait import portraits

with open('Data.json', encoding='utf8') as f:
    data = json.loads(f.read())['test']  # –º–∞—Å—Å–∏–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞—Ç
with open('Data.json', encoding='utf8') as f:
    terms = json.loads(f.read())['terms']  # same –∏–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤
with open('Data.json', encoding='utf8') as f:
    facts = json.loads(f.read())['facts']  # same –∏–∑ —Ñ–∞–∫—Ç–æ–≤
with open('Data.json', encoding='utf8') as f:
    culture = json.loads(f.read())['culture']  # same –∏–∑ —Ñ–∞–∫—Ç–æ–≤
with open('Data.json', encoding='utf8') as f:
    war = json.loads(f.read())['ww2']  # same –∏–∑ –≤–æ–≤

app = Flask('')
# from flask_ngrok import run_with_ngrok
# run_with_ngrok(app)
app.config['SECRET_KEY'] = 'alice'
# logging.basicConfig(
#     filename='example.log',
#     format='%(asctime)s %(name)s %(message)s',
#     level=logging.INFO
# )


# commiting
# schedule.every().hour.do(commiting)


def run():
    app.run(host="0.0.0.0", port=8080)


def keep_alive():
    server = Thread(target=run)
    server.start()


sessionStorage = {}

# —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
right = ['–û—Ç–ª–∏—á–Ω–æ!', '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!', '–°—É–ø–µ—Ä!', '–¢–æ—á–Ω–æ!', '–í–µ—Ä–Ω–æ!', '–•–æ—Ä–æ—à–æ!', '–ù–µ–ø–ª–æ—Ö–æ!']

wrong = ['–û–π!', '–ù–µ —Ç–æ!', '–¢—ã –æ—à–∏–±—Å—è!', '–ù–µ–º–Ω–æ–≥–æ –Ω–µ —Ç–æ!', '–ù–µ–≤–µ—Ä–Ω–æ!', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!', '–û—à–∏–±–æ—á–∫–∞!']

_next = ['–î–∞–ª–µ–µ', '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', '–ü—Ä–æ–¥–æ–ª–∂–∏–º', '–°–ª–µ–¥—É—é—â–µ–µ']

wtf = ['–ü—Ä–æ—Å—Ç–∏, –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è', '–ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?', '–ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–ü—Ä–æ—Å—Ç–∏, –Ω–µ —Å–ª—ã—à—É —Ç–µ–±—è']

goodbye = ['–ü–æ–∫–∞!', '–î–æ –≤—Å—Ç—Ä–µ—á–∏!', '–ë—É–¥–µ–º –Ω–∞ —Å–≤—è–∑–∏!', '–†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è!', '–ü–æ–∫–∞-–ø–æ–∫–∞!']

hey = ['–ü—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è', '–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è', '–•–æ—Ä–æ—à–æ, —á—Ç–æ –º—ã —Å–Ω–æ–≤–∞ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å', '–ü—Ä–∏–≤–µ—Ç–∏–∫',
       '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π']

do_not_know = ["–ñ–∞–ª—å!",
               "–≠—Ö, –∂–∞–ª–∫–æ!",
               "–ú—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º!",
               "–ù–∏—á–µ–≥–æ, –≤—Å–µ –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏!",
               "–ü–æ—Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ!",
               "–ü–æ–ø—Ä–æ–±—É–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!",
               "–ü—Ä–∞–∫—Ç–∏–∫–æ–π –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞!",
               "–≠—Ç—É —Ç–µ–º—É —Å—Ç–æ–∏—Ç –ø–æ–¥—É—á–∏—Ç—å.",
               "–ó–∞–ø–æ–º–∏–Ω–∞–π!",
               "–í —Å–ª–µ–¥—É—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è!",
               "–ü–æ–¥–Ω–∞–∂–º–∏, –≤—Å–µ —Å—É–ø–µ—Ä!",
               "–ù–∏—á–µ–≥–æ, –±—ã–≤–∞–µ—Ç :)",
               "–ë—ã–≤–∞–µ—Ç :)",
               "–í—Å–µ –æ–∫–µ–π :)",
               "–°—Ç–∞—Ä–∞–π—Å—è!",
               "–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è –¥–∞–ª—å—à–µ!"]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ê–ª–∏—Å—ã
def write_in_state(user_id):
    return {
        'nick': sessionStorage[user_id]['nick'],
        'test_count': sessionStorage[user_id]['test_count'],
        'pic_count': sessionStorage[user_id]['pic_count'],
        'ter_count': sessionStorage[user_id]['ter_count'],
        'cul_count': sessionStorage[user_id]['cul_count']
    }


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
def config(user_id):
    # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –¥–∞—Ç –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤
    arr = copy.deepcopy(data)
    term = copy.deepcopy(terms)
    random.shuffle(arr)
    random.shuffle(term)
    sessionStorage[user_id] = {
        'suggests': [
            "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéØ",
            "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üéÆ",
            "–ü–æ–ª–µ–∑–Ω–æ–µ ‚úÖ"
        ],
        'slicedsuggests': [
            "–ú–µ–Ω—é",
            "–ù–µ –∑–Ω–∞—é ü§∑‚ÄçÔ∏è"
        ],
        'test_buttons': [
            "–î–∞—Ç—ã ‚åõÔ∏è",
            "–ö–∞—Ä—Ç–∏–Ω—ã üèû",
            "–¢–µ—Ä–º–∏–Ω—ã üìñ",
            "–ú–µ–Ω—é"
        ],
        'want_to_change_nick': False,
        'old_nick': '',
        "nick": None,
        'id': 0,
        'mode': '',
        'lastPic': False,
        # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞—Ç
        'test': arr,
        'lastQ': False,

        # –æ—á–∫–∏ –¥–ª—è –ë–î
        'test_count': 0,
        'pic_count': 0,
        'ter_count': 0,
        'cul_count': 0,

        # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤
        'term': term,
        'lastT': False,
        'terID': 0,

        # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –í–û–í
        'ww2_id': 0,

    }


# –ó–∞–ø–∏—Å—å –≤ –ë–î
def write_in_base(user_id):
    con = psycopg2.connect(user="cbbdrghpynreoq",
                           password="97ef09f2e8c1be408a28e5bcef9597dbd01dc8b75be2c364b540f3f1e1c51d7c",
                           host="ec2-54-75-246-118.eu-west-1.compute.amazonaws.com",
                           port="5432",
                           database="d7m2s796gtnbj0")
    cur = con.cursor()
    test_count = sessionStorage[user_id]['test_count']
    pic_count = sessionStorage[user_id]['pic_count']
    ter_count = sessionStorage[user_id]['ter_count']
    cul_count = sessionStorage[user_id]['cul_count']
    cur.execute(f"SELECT * FROM u WHERE nick = '{sessionStorage[user_id]['nick']}';")
    if cur.fetchone() is None:

        cur.execute(
            f"INSERT INTO u VALUES (DEFAULT,'{sessionStorage[user_id]['nick']}',{test_count},{pic_count},{ter_count},{cul_count},{test_count + pic_count + ter_count + cul_count});")
    else:
        cur.execute(
            f"UPDATE u SET (date_count, pic_count, ter_count, cul_count, summa) = ({test_count},{pic_count},{ter_count},{cul_count},{test_count + pic_count + ter_count + cul_count}) WHERE nick = '{sessionStorage[user_id]['nick']}';")
    con.commit()
    con.close()


@app.route('/')
def hi():
    return 'Hey, our app works!'


# –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–µ –æ—á–∫–æ–≤
@app.route('/records')
def records():
    con = psycopg2.connect(user="cbbdrghpynreoq",
                           password="97ef09f2e8c1be408a28e5bcef9597dbd01dc8b75be2c364b540f3f1e1c51d7c",
                           host="ec2-54-75-246-118.eu-west-1.compute.amazonaws.com",
                           port="5432",
                           database="d7m2s796gtnbj0")
    cur = con.cursor()
    cur.execute("SELECT * FROM u;")
    persons = cur.fetchall()
    con.commit()
    con.close()
    persons = sorted(persons, key=lambda x: -x[-1])
    return render_template('records.html', title='–†–µ–∫–æ—Ä–¥—ã | –ï–ì–≠', persons=persons)


@app.route('/post', methods=['POST'])
def main():
    response = {
        'session': request.json['session'],
        'version': request.json['version'],
        'response': {
            'end_session': False
        },
    }
    if 'screen' in request.json['meta']['interfaces']:
        handle_dialog(request.json, response)
    else:
        station_dialog(request.json, response)
    return json.dumps(response)


# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞"
def victorina_list():
    return {
        "type": "ItemsList",
        "header": {
            "text": "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéØ"
        },
        "items": [
            {
                "title": "–î–∞—Ç—ã",
                "description": "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ç–æ –∏–ª–∏ –∏–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ. "
                               "–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∑–≤–∞–Ω–Ω—ã–π –≤–µ–∫ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 0.5 –±–∞–ª–ª–∞, –∞ –∑–∞ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É - 1 ",
                "button": {
                    "text": "–î–∞—Ç—ã"
                }
            },
            {
                "title": "–ö–∞—Ä—Ç–∏–Ω—ã",
                "description": "–ó–¥–µ—Å—å —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π, –∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å, "
                               "–∫—Ç–æ –Ω–∞ –Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂—ë–Ω ",
                "button": {
                    "text": "–ö–∞—Ä—Ç–∏–Ω—ã"
                }
            },
            {
                "title": "–ö—É–ª—å—Ç—É—Ä–∞",
                "description": "–í –¥–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —è —Å–ø—Ä–æ—à—É —É —Ç–µ–±—è –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±–æ—Ä–∞—Ö –∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∞—Ö",
                "button": {
                    "text": "–ö—É–ª—å—Ç—É—Ä–∞"
                }
            },
            {
                "title": "–¢–µ—Ä–º–∏–Ω—ã",
                "description": "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ª—é–±–∏–º–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ ‚Ññ4 –ï–ì–≠. –°–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ '–ï–ì–≠ –±–ª–∏–∑–∫–æ'",
                "button": {
                    "text": "–¢–µ—Ä–º–∏–Ω—ã"
                }
            }
        ]
    }


# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ü–æ–ª–µ–∑–Ω–æ–µ"
def useful_list():
    return {
        "type": "ItemsList",
        "header": {
            "text": "–ü–æ–ª–µ–∑–Ω–æ–µ ‚úÖ"
        },
        "items": [
            {
                "title": "–§–∞–∫—Ç—ã –¥–≤—É—Ö —Å—Ç–æ–ª–∏—Ü",
                "description": "–£–∑–Ω–∞–π –Ω–µ–æ–±—ã—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ!",
                "button": {
                    "text": "–§–∞–∫—Ç—ã –¥–≤—É—Ö —Å—Ç–æ–ª–∏—Ü"
                }
            },
            {
                "title": "–í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞",
                "description": "–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–µ–ª–∏–∫–æ–π –≤–æ–π–Ω—ã",
                "button": {
                    "text": "–í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞"
                }
            },
            {
                "title": "–ü—Ä–æ–µ–∫—Ç \"–ï–ì–≠ –±–ª–∏–∑–∫–æ\"",
                "description": "–ù–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!",
                "button": {
                    "url": "https://vk.com/ege72"
                }
            }
        ]
    }


# –†–µ–∞–∫—Ü–∏—è –ê–ª–∏—Å—ã –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def alice_reaction_to_dont_know_or_wrong_answer(user_answer):
    if '–Ω–µ –∑–Ω–∞—é' in user_answer or '—Ö–∑' in user_answer or '–Ω–µ –ø–æ–º–Ω—é' in user_answer:
        return random.choice(do_not_know)
    return random.choice(wrong)


# –î–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —ç–∫—Ä–∞–Ω–æ–º
def handle_dialog(req, res):
    user_id = req['session']['user_id']
    if res['response']['end_session'] is True:
        write_in_base(user_id)
    if req['session']['new']:
        config(user_id)
        # –ü–æ–ø—ã—Ç–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ –Ω–∞–≤—ã–∫ –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        try:
            # con = sqlite3.connect("users.db")
            # cur = con.cursor()
            # user = cur.execute(f"SELECT * FROM u WHERE nick = '{req['state']['user']['nick']}';").fetchone()
            if not 'cul_count' in req['state']['user']:
                sessionStorage[user_id]['cul_count'] = 0
            else:
                sessionStorage[user_id]['cul_count'] = req['state']['user']['cul_count']
            res['response']['text'] = f"{random.choice(hey)}, {req['state']['user']['nick']}! " \
                f"–ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –¢–≤–æ–∏ –æ—á–∫–∏:\n–î–∞—Ç—ã: {req['state']['user']['test_count']}\n" \
                f"–ö–∞—Ä—Ç–∏–Ω—ã: {req['state']['user']['pic_count']}\n–¢–µ—Ä–º–∏–Ω—ã: {req['state']['user']['ter_count']}\n" \
                f"–ö—É–ª—å—Ç—É—Ä–∞: {sessionStorage[user_id]['cul_count']}"
            sessionStorage[user_id]['nick'] = req['state']['user']['nick']
            sessionStorage[user_id]['test_count'] = req['state']['user']['test_count']
            sessionStorage[user_id]['pic_count'] = req['state']['user']['pic_count']
            sessionStorage[user_id]['ter_count'] = req['state']['user']['ter_count']
            res['response']['buttons'] = [
                {'title': suggest, 'hide': False}
                for suggest in sessionStorage[user_id]['suggests']
            ]
            res['response']['buttons'].append({'title': '–†–µ–π—Ç–∏–Ω–≥ üèÜ', 'hide': False,
                                               'url': 'https://alice-skills-1--t1logy.repl.co/records'})
            res['response']['buttons'].append({'title': '–£—Ä–æ–≤–µ–Ω—å üí™üèª', 'hide': False})
            res['response']['buttons'].append({'title': '–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå', 'hide': False})

        except Exception:
            res['response']['card'] = {
                "type": "BigImage",
                "image_id": "1030494/24c5d25eff634432c3ef",
                "title": "–ü—Ä–∏–≤–µ—Ç!",
                "description": '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ ‚ú®\n ''–ù–∞–ø–∏—à–∏ –∏–ª–∏ —Å–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è '
                               '–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: '
            }
            res['response']['text'] = res['response']['card']['description']
        return

    if sessionStorage[user_id]['nick'] is None:
        tag = str(random.randint(0, 10001))
        if len(req['request']['original_utterance']) > 30:
            res['response']['text'] = '–í–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ.'
        else:
            new_nick = req['request']['original_utterance'] + "#" + tag
            if sessionStorage[user_id]['want_to_change_nick']:
                con = psycopg2.connect(user="cbbdrghpynreoq",
                                       password="97ef09f2e8c1be408a28e5bcef9597dbd01dc8b75be2c364b540f3f1e1c51d7c",
                                       host="ec2-54-75-246-118.eu-west-1.compute.amazonaws.com",
                                       port="5432",
                                       database="d7m2s796gtnbj0")
                cur = con.cursor()
                print(new_nick, sessionStorage[user_id]['nick'])
                cur.execute(f"UPDATE u SET nick = '{new_nick}' WHERE nick = '{sessionStorage[user_id]['nick']}'")
                con.commit()
                con.close()
                sessionStorage[user_id]['want_to_change_nick'] = False
            sessionStorage[user_id]['nick'] = new_nick
            # write_in_base(user_id)
            res['response']['text'] = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n' \
                                      '–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá –∏–ª–∏ —Å–∫–∞–∂–∏, ' \
                                      '—á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏—Ö.' \
                                      ' –ù–µ –∑–∞–±—ã–≤–∞–π, —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω! üòÅ'
            res['response']['buttons'] = [
                {'title': suggest, 'hide': False}
                for suggest in sessionStorage[user_id]['suggests']
            ]
            res['response']['buttons'].append({'title': '–†–µ–π—Ç–∏–Ω–≥ üèÜ', 'hide': False,
                                               'url': 'https://alice-skills-1--t1logy.repl.co/records'})
            res['response']['buttons'].append({'title': '–£—Ä–æ–≤–µ–Ω—å üí™üèª', 'hide': False})
            res['user_state_update'] = {
                'nick': sessionStorage[user_id]['nick']
            }

        return

    if res['response']['end_session'] is True:
        write_in_base(user_id)
        res['user_state_update'] = {
            'nick': sessionStorage[user_id]['nick']
        }
    # log
    # logging.info(f"------REQUEST COMMAND: {req['request']['original_utterance']} DEVICE: {req['meta']['client_id']}\n")

    # –ú–µ–Ω—é
    if '–º–µ–Ω—é' in req['request']['original_utterance'].lower() or \
            '—Ä–µ–π—Ç–∏–Ω–≥' in req['request']['original_utterance'].lower() or '–ø–æ–º–æ—â—å' in req['request'][
        'original_utterance'].lower() or '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å' in req['request']['original_utterance'].lower():
        res['response']['text'] = '–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏—Ö. ' \
                                  '–ù–µ –∑–∞–±—ã–≤–∞–π, —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω! üòÅ'
        res['response']['tts'] = res['response']['text'] + '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –Ω–∞–∑—ã–≤–∞–ª–∞ —Ç–µ–±—è –ø–æ-–¥—Ä—É–≥–æ–º—É, —Å–∫–∞–∂–∏ ' \
                                                           '—Å–º–µ–Ω–∏—Ç—å –∏–º—è –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ '
        sessionStorage[user_id]['lastQ'] = False
        sessionStorage[user_id]['lastPic'] = False
        sessionStorage[user_id]['lastT'] = False
        sessionStorage[user_id]['mode'] = ''
        res['response']['buttons'] = [
            {'title': suggest, 'hide': False}
            for suggest in sessionStorage[user_id]['suggests']
        ]
        res['response']['buttons'].append({'title': '–†–µ–π—Ç–∏–Ω–≥ üèÜ', 'hide': False,
                                           'url': 'https://alice-skills-1--t1logy.repl.co/records'})
        res['response']['buttons'].append({'title': '–£—Ä–æ–≤–µ–Ω—å üí™üèª', 'hide': False})
        res['response']['buttons'].append({'title': '–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå', 'hide': False})
        return

    # –î–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–∞
    if '—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫' in req['request']['original_utterance'].lower() or \
            '—Å–º–µ–Ω–∏—Ç—å –∏–º—è' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['old_nick'] = sessionStorage[user_id]['nick']
        sessionStorage[user_id]['nick'] = None
        res['response']['text'] = '–ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?'
        sessionStorage[user_id]['want_to_change_nick'] = True
        return

    # —Å—Ç–∞–≤–∏–º —Ä–µ–∂–∏–º
    if '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Ä–µ—Å—É—Ä—Å—ã'

    if '–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞'
    if '–ø–æ–ª–µ–∑–Ω–æ–µ' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–ø–æ–ª–µ–∑–Ω–æ–µ'

    if '—É—Ä–æ–≤–µ–Ω—å' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—É—Ä–æ–≤–µ–Ω—å'

    if '—Ñ–∞–∫—Ç—ã –¥–≤—É—Ö —Å—Ç–æ–ª–∏—Ü' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Ñ–∞–∫—Ç—ã'
        sessionStorage[user_id]['factID'] = 0
        fact = copy.deepcopy(facts)
        random.shuffle(fact)
        sessionStorage[user_id]['facts'] = fact

    if '–≤–µ–ª–∏–∫–∞—è –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['ww2_id'] = 0
        ww2 = copy.deepcopy(war)
        sessionStorage[user_id]['ww2'] = ww2
        sessionStorage[user_id]['mode'] = '–≤–æ–π–Ω–∞'

    # –µ—Å–ª–∏ –≤ –Ω–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ '–∑–∞–∫—Ä—ã—Ç—å' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    if '–∑–∞–∫—Ä—ã—Ç—å' in req['request']['original_utterance'].lower():
        res['response']['text'] = random.choice(
            goodbye) + '\n–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –ø–æ—Å—Ç–∞–≤—å –Ω–∞–º –æ—Ü–µ–Ω–∫—É üëá. –°–ø–∞—Å–∏–±–æ :)\n–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!\n' \
                       '–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ—á–∞—â–µ, –≤–µ–¥—å —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —É—Å–ø–µ—Ö—É!'
        res['response']['buttons'] = [{
            'title': '–û—Ü–µ–Ω–∏—Ç—å ‚≠êÔ∏è',
            'hide': False,
            'url': 'https://dialogs.yandex.ru/store/skills/1424e7f5-ege-po-istorii'
        },
            {
                'title': '–†–µ–π—Ç–∏–Ω–≥ üèÜ',
                'hide': False,
                'url': 'https://alice-skills-1--t1logy.repl.co/records'
            }
        ]
        res['response']['end_session'] = True
        # config(user_id) # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—Ç –∑–∞–Ω–æ–≤–æ –∏–≥—Ä–∞—Ç—å –ë–ï–ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–≤—ã–∫–∞
        return

    if '–¥–∞—Ç—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–¥–∞—Ç—ã'
    if '–∫–∞—Ä—Ç–∏–Ω—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–∫–∞—Ä—Ç–∏–Ω—ã'
    if '—Ç–µ—Ä–º–∏–Ω—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Ç–µ—Ä–º–∏–Ω—ã'
    if '–∫—É–ª—å—Ç—É—Ä–∞' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–∫—É–ª—å—Ç—É—Ä–∞'
        sessionStorage[user_id]['cultID'] = 0
        sessionStorage[user_id]['last–°'] = False
        cult = copy.deepcopy(culture)
        random.shuffle(cult)
        sessionStorage[user_id]['culture'] = cult

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if sessionStorage[user_id]['mode'] == '–ø–æ–ª–µ–∑–Ω–æ–µ':
        res['response']['card'] = useful_list()
        if '–ø–æ–ª–µ–∑–Ω–æ–µ' in req['request']['original_utterance'].lower():
            res['response'][
                'text'] = '–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ,' \
                          ' –∞ —Ç–∞–∫ –∂–µ –∏—Å—Ç–æ—Ä–∏—è –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã. –í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å.'
        else:
            res['response']['text'] = '–ù–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö! '
        return
    elif sessionStorage[user_id]['mode'] == '–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞':
        res['response']['card'] = victorina_list()
        if '–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞' in req['request']['original_utterance'].lower():
            res['response']['text'] = '–í –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤: ' \
                                      '–¥–∞—Ç—ã, –∫–∞—Ä—Ç–∏–Ω—ã, –∫—É–ª—å—Ç—É—Ä–∞ –∏ —Ç–µ—Ä–º–∏–Ω—ã. –í –∫–∞–∂–¥–æ–º —Ä–µ–∂–∏–º–µ –∑–∞ ' \
                                      '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –æ—á–∫–∏, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω!'
        else:
            res['response'][
                'text'] = '–ù–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!'
        return
    elif sessionStorage[user_id]['mode'] == '–¥–∞—Ç—ã':
        if not sessionStorage[user_id]['lastQ']:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            res['response']['text'] = sessionStorage[user_id]['test'][sessionStorage[user_id]['id']]['question']
            sessionStorage[user_id]['lastQ'] = True
        else:  # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            res['response']['text'] = sessionStorage[user_id]['test'][sessionStorage[user_id]['id']]['question']
            user_answer = req['request']['command'].lower()
            right_answer = sessionStorage[user_id]['test'][sessionStorage[user_id]['id'] - 1]['answer'].lower().split(
                '/')
            years = right_answer[0].split(' ')
            centuries = right_answer[1].split(' ')

            print(years, centuries)
            print(user_answer)
            if '–≤–µ–∫' not in user_answer:
                if len(years) > 1:  # –µ—Å–ª–∏ —É –Ω–∞—Å 2 –≥–æ–¥–∞
                    if years[0] in user_answer and years[1] in user_answer:
                        res['response'][
                            'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                        sessionStorage[user_id]['test_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ –¥–∞—Ç–∞–º
                        res['user_state_update'] = write_in_state(user_id)
                        write_in_base(user_id)
                    else:
                        word = alice_reaction_to_dont_know_or_wrong_answer(user_answer)
                        res['response']['text'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                                                  f"—Å {years[0]} –≥–æ–¥ –ø–æ {years[1]} –≥–æ–¥. \n{random.choice(_next)}: {res['response']['text']}"
                    print(years[0] in user_answer, years[1] in user_answer)
                else:  # –µ—Å–ª–∏ 1 –≥–æ–¥
                    if years[0] in user_answer:
                        res['response'][
                            'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                        sessionStorage[user_id]['test_count'] += 1
                        res['user_state_update'] = write_in_state(user_id)
                        write_in_base(user_id)
                    else:
                        word = alice_reaction_to_dont_know_or_wrong_answer(user_answer)
                        res['response'][
                            'text'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                                      f"–≤ {years[0]} –≥–æ–¥—É. \n{random.choice(_next)}: {res['response']['text']}"
            else:
                if len(centuries) == 2:  # –æ–¥–∏–Ω –≤–µ–∫ + —Å–ª–æ–≤–æ "–≤–µ–∫"
                    if centuries[0] in user_answer and centuries[1] in user_answer:
                        res['response'][
                            'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                        sessionStorage[user_id]['test_count'] += 0.5
                        res['user_state_update'] = write_in_state(user_id)
                        write_in_base(user_id)

                    else:
                        word = alice_reaction_to_dont_know_or_wrong_answer(user_answer)
                        res['response']['text'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                                                  f"–≤ {centuries[0]}-–æ–º –≤–µ–∫–µ \n{random.choice(_next)}: {res['response']['text']}"
                else:
                    if centuries[0] in user_answer and centuries[1] in user_answer and centuries[2] in user_answer:
                        res['response'][
                            'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                        sessionStorage[user_id]['test_count'] += 0.5
                        res['user_state_update'] = write_in_state(user_id)
                        write_in_base(user_id)
                    else:
                        word = alice_reaction_to_dont_know_or_wrong_answer(user_answer)
                        res['response']['text'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                                                  f"—Å {centuries[0]}-—ã–π –≤–µ–∫ –ø–æ {centuries[1]}-—ã–π –≤–µ–∫ \n{random.choice(_next)}: {res['response']['text']}"

        sessionStorage[user_id]['id'] += 1
        if sessionStorage[user_id]['id'] == len(sessionStorage[user_id]['test']):
            sessionStorage[user_id]['id'] = 0
            random.shuffle(sessionStorage[user_id]['test'])
        res['response']['buttons'] = [
            {'title': suggest, 'hide': True}
            for suggest in sessionStorage[user_id]['slicedsuggests']
        ]

    elif sessionStorage[user_id]['mode'] == '–∫–∞—Ä—Ç–∏–Ω—ã':
        if not sessionStorage[user_id]['lastPic']:  # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            sessionStorage[user_id]['arrayPic'] = list(portraits)
            random.shuffle(sessionStorage[user_id]['arrayPic'])
            sessionStorage[user_id]['idPic'] = 0
            res['response']['card'] = {}
            res['response']['card']['type'] = 'BigImage'
            res['response']['card']['title'] = '–ö—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?'
            res['response']['card']['image_id'] = \
                portraits.get(sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic']])
            res['response']['text'] = '–ö—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?'
            sessionStorage[user_id]['lastPic'] = True
        else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ
            res['response']['card'] = {}
            res['response']['card']['type'] = 'BigImage'
            for ans in sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic'] - 1].lower().split('/'):
                if ans in req['request']['original_utterance'].lower():
                    res['response']['card']['title'] = random.choice(right)
                    sessionStorage[user_id]['pic_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
                    res['user_state_update'] = write_in_state(user_id)
                    write_in_base(user_id)
                    break
                else:
                    word = alice_reaction_to_dont_know_or_wrong_answer(req['request']['original_utterance'].lower())
                    res['response']['card']['title'] \
                        = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                          f"{random.choice(sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic'] - 1].split('/'))}."

            if sessionStorage[user_id]['idPic'] == len(sessionStorage[user_id]['arrayPic']):
                random.shuffle(sessionStorage[user_id]['arrayPic'])
                sessionStorage[user_id]['idPic'] = 0
            res['response']['card']['image_id'] = \
                portraits.get(sessionStorage[user_id]['arrayPic'][sessionStorage[user_id]['idPic']])
            res['response']['card']['title'] += ' –ö—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?'
            res['response']['text'] = res['response']['card']['title']
        sessionStorage[user_id]['idPic'] += 1
        res['response']['buttons'] = [
            {'title': suggest, 'hide': True}
            for suggest in sessionStorage[user_id]['slicedsuggests']
        ]
    elif sessionStorage[user_id]['mode'] == '—Ç–µ—Ä–º–∏–Ω—ã':
        if not sessionStorage[user_id]['lastT']:
            res['response']['text'] = sessionStorage[user_id]['term'][sessionStorage[user_id]['terID']]['question']
            sessionStorage[user_id]['lastT'] = True
        else:
            res['response']['text'] = sessionStorage[user_id]['term'][sessionStorage[user_id]['terID']]['question']
            for ans in sessionStorage[user_id]['term'][sessionStorage[user_id]['terID'] - 1][
                'answer'].lower().split('/'):
                if ans in req['request']['original_utterance'].lower():
                    res['response'][
                        'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                    sessionStorage[user_id]['ter_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º
                    res['user_state_update'] = write_in_state(user_id)
                    write_in_base(user_id)
                    break
            else:
                word = alice_reaction_to_dont_know_or_wrong_answer(req['request']['original_utterance'].lower())
                res['response'][
                    'text'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                    f"{sessionStorage[user_id]['term'][sessionStorage[user_id]['terID'] - 1]['answer']}. \n" \
                    f"{random.choice(_next)}: {res['response']['text']}"
        sessionStorage[user_id]['terID'] += 1
        if sessionStorage[user_id]['terID'] == len(sessionStorage[user_id]['term']):
            random.shuffle(sessionStorage[user_id]['term'])
            sessionStorage[user_id]['terID'] = 0
        res['response']['buttons'] = [
            {'title': suggest, 'hide': True}
            for suggest in sessionStorage[user_id]['slicedsuggests']
        ]
    elif sessionStorage[user_id]['mode'] == '–∫—É–ª—å—Ç—É—Ä–∞':
        if not sessionStorage[user_id]['last–°']:
            res['response']['card'] = {}
            res['response']['card']['type'] = 'BigImage'
            res['response']['card']['title'] = sessionStorage[user_id]['culture'][sessionStorage[user_id]['cultID']][
                'question']
            res['response']['card']['image_id'] = sessionStorage[user_id]['culture'][sessionStorage[user_id]['cultID']][
                'photo_id']
            sessionStorage[user_id]['last–°'] = True
        else:
            res['response']['card'] = {}
            res['response']['card']['type'] = 'BigImage'

            res['response']['card']['image_id'] = sessionStorage[user_id]['culture'][sessionStorage[user_id]['cultID']][
                'photo_id']
            res['response']['text'] = sessionStorage[user_id]['culture'][sessionStorage[user_id]['cultID']]['question']
            for ans in sessionStorage[user_id]['culture'][sessionStorage[user_id]['cultID'] - 1][
                'answer'].lower().split('/'):
                if ans in req['request']['original_utterance'].lower():
                    res['response']['card'][
                        'title'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                    sessionStorage[user_id]['cul_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º
                    res['user_state_update'] = write_in_state(user_id)
                    write_in_base(user_id)
                    break
            else:
                word = alice_reaction_to_dont_know_or_wrong_answer(req['request']['original_utterance'].lower())
                res['response']['card']['title'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                                                   f"{random.choice(sessionStorage[user_id]['culture'][sessionStorage[user_id]['cultID'] - 1]['answer'].split('/'))}. \n" \
                                                   f"{random.choice(_next)}: {res['response']['text']}"
        res['response']['text'] = res['response']['card']['title']
        sessionStorage[user_id]['cultID'] += 1
        if sessionStorage[user_id]['cultID'] == len(sessionStorage[user_id]['culture']):
            random.shuffle(sessionStorage[user_id]['culture'])
            sessionStorage[user_id]['cultID'] = 0
        res['response']['buttons'] = [
            {'title': suggest, 'hide': True}
            for suggest in sessionStorage[user_id]['slicedsuggests']
        ]

    elif sessionStorage[user_id]['mode'] == '—Ä–µ—Å—É—Ä—Å—ã':

        if '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' in req['request']['original_utterance'].lower():
            res['response']['buttons'] = [{
                'title': '–°—Ç–∞—Ç—å–∏Ô∏è üìñ',
                'hide': True,
            },
                {
                    'title': '–ú—É–∑—ã–∫–∞ üéµ',
                    'hide': True,
                }
            ]
            res['response']['text'] = '–ó–¥–µ—Å—å –º—ã –ø—É–±–ª–∏–∫—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ü–æ—Å–ª—É—à–∞–µ–º –º—É–∑—ã–∫—É –∏–ª–∏ –ø–æ—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—å–∏?'
        elif '–º—É–∑—ã–∫–∞' in req['request']['original_utterance'].lower() or '–º—É–∑—ã–∫—É' in req['request'][
            'original_utterance'].lower():
            res['response']['buttons'] = [{
                'title': '–°—Ç–∞—Ç—å–∏Ô∏è üìñ',
                'hide': True,
            }]
            res['response']['tts'] = "–í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –º—É–∑—ã–∫–∏"
            res['response']['text'] = res['response']['tts']
            res['response']['card'] = {
                "type": "ItemsList",
                "header": {
                    "text": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞",
                },
                "items": [
                    {
                        "image_id": "937455/3a9025e4d08f2c295d85",
                        "title": "–•–∏—Ç—ã –°–°–°–†",
                        "description": "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ",
                        "button": {
                            "url":
                                'https://music.yandex.ru/users/sctnStudio/playlists/1002'
                        }
                    },
                    {
                        "image_id": "1521359/94ab576717d5217f7fdb",
                        "title": "–ì–∏–º–Ω—ã —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞",
                        "description": "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ",
                        "button": {
                            "url": 'https://music.yandex.ru/users/sctnStudio/playlists/1004'
                        }
                    },
                    {
                        "image_id": "965417/aa2cbef4a55c41b57322",
                        "title": "–í–æ–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏",
                        "description": "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ",
                        "button": {
                            "url": 'https://music.yandex.ru/users/sctnStudio/playlists/1001'
                        }
                    }
                ]
            }
        elif '—Å—Ç–∞—Ç—å–∏' in req['request']['original_utterance'].lower():
            res['response']['buttons'] = [
                {
                    'title': '–ú—É–∑—ã–∫–∞ üéµ',
                    'hide': True,
                }
            ]
            res['response']['tts'] = "–í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∞ –∫–ª–∞—Å—Å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞—Ç–µ–π"
            res['response']['text'] = res['response']['tts']
            res['response']['card'] = {
                "type": "ItemsList",
                "header": {
                    "text": "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏",
                },
                "items": [
                    {
                        # "image_id": "937455/3a9025e4d08f2c295d85",
                        "title": "13 –ª—É—á—à–∏—Ö –∫–Ω–∏–≥ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏",
                        "description": "–ò—Å—Ç–æ—á–Ω–∏–∫: Lifehacker.ru",
                        "button": {
                            "url": 'https://lifehacker.ru/knigi-po-istorii/'
                        }
                    },
                    {
                        # "image_id": "1521359/94ab576717d5217f7fdb",
                        "title": "–°–æ–≤–µ—Ç—ã –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏",
                        "description": "–ò—Å—Ç–æ—á–Ω–∏–∫: –£—á—ë–±–∞.—Ä—É",
                        "button": {
                            "url": 'https://www.ucheba.ru/for-abiturients/ege/articles/history'
                        }
                    },
                    {
                        # "image_id": "965417/aa2cbef4a55c41b57322",
                        "title": "–ü–∞–º—è—Ç–∫–∏ –∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏",
                        "description": "–ò—Å—Ç–æ—á–Ω–∏–∫: historystepa.ru",
                        "button": {
                            "url": 'http://historystepa.ru/'
                        }
                    }
                ]
            }
        else:
            res['response']['buttons'] = [{
                'title': '–°—Ç–∞—Ç—å–∏Ô∏è üìñ',
                'hide': True,
            },
                {
                    'title': '–ú—É–∑—ã–∫–∞ üéµ',
                    'hide': True,
                }
            ]
            res['response']['text'] = f"{random.choice(wtf)}\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!"
        res['response']['buttons'].append({'title': '–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå', 'hide': True})
        res['response']['buttons'].append({'title': '–ú–µ–Ω—é', 'hide': True})
        res['response']['buttons'].append({'title': '–û—Ü–µ–Ω–∏—Ç—å ‚≠ê', 'hide': True,
                                           'url': 'https://dialogs.yandex.ru/store/skills/1424e7f5-ege-po-istorii'})
        return
    elif sessionStorage[user_id]['mode'] == '—É—Ä–æ–≤–µ–Ω—å':
        test_count = sessionStorage[user_id]['test_count']
        pic_count = sessionStorage[user_id]['pic_count']
        ter_count = sessionStorage[user_id]['ter_count']
        cul_count = sessionStorage[user_id]['cul_count']
        summa = test_count + pic_count + ter_count + cul_count
        res['response']['card'] = {}
        res['response']['card']['type'] = 'BigImage'
        res['response']['tts'] = '<speaker audio="alice-sounds-game-win-1.opus">'
        if summa < 20:
            res['response']['text'] = f'–¢—ã –µ—â–µ –Ω–æ–≤–∏—á–æ–∫, 1 —É—Ä–æ–≤–µ–Ω—å! ' \
                                      f'–ü–æ–¥–Ω–∞–∂–º–∏: –¥–æ 2–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å {20 - summa} {count_naming(20, summa)}'
            res['response']['card']['image_id'] = '1540737/62bffa1f1c62a4c6812c'
        elif summa < 40:
            res['response']['text'] = f'–ö—Ä—É—Ç–æ! 2 —É—Ä–æ–≤–µ–Ω—å. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–Ω–∞–∂–∞—Ç—å:' \
                                      f' –¥–æ 3–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å {40 - summa} {count_naming(40, summa)}'
            res['response']['card']['image_id'] = '213044/e3649e3e18880a531e76'
        elif summa < 60:
            res['response']['text'] = f'–û–≥–æ! –¢—ã –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —É—Ä–æ–≤–Ω–µ. –°–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å –¥–æ –ø–æ–±–µ–¥—ã, –æ—Å—Ç–∞–ª–æ—Å—å ' \
                                      f'{60 - summa} {count_naming(60, summa)}'
            res['response']['card']['image_id'] = '1652229/aadaf325e34cb47c7401'
        else:
            res['response']['text'] = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –° —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –º–æ–≥—É –Ω–∞–∑–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞—Å—Ç–æ—è—â–∏–º –∏—Å—Ç–æ—Ä–∏–∫–æ–º!'
            res['response']['card']['image_id'] = '1540737/674b982eaca1f8245da4'
        res['response']['card']['title'] = res['response']['text']
        res['response']['tts'] += res['response']['text']
        res['response']['buttons'] = [
            {'title': suggest, 'hide': True}
            for suggest in sessionStorage[user_id]['slicedsuggests'][:1]
        ]

        res['response']['buttons'].append({'title': '–û—Ü–µ–Ω–∏—Ç—å ‚≠ê', 'hide': True,
                                           'url': 'https://dialogs.yandex.ru/store/skills/1424e7f5-ege-po-istorii'})
        return

    elif sessionStorage[user_id]['mode'] == '—Ñ–∞–∫—Ç—ã':
        res['response']['buttons'] = []
        res['response']['text'] = sessionStorage[user_id]['facts'][sessionStorage[user_id]['factID']]['fact']
        res['response']['tts'] = sessionStorage[user_id]['facts'][sessionStorage[user_id]['factID']]['tts']
        if 'photo_id' in sessionStorage[user_id]['facts'][sessionStorage[user_id]['factID']]:
            res['response']['card'] = {}
            res['response']['card']['type'] = 'BigImage'
            res['response']['card']['title'] = sessionStorage[user_id]['facts'][sessionStorage[user_id]['factID']][
                'title']
            res['response']['card']['image_id'] = sessionStorage[user_id]['facts'][sessionStorage[user_id]['factID']][
                'photo_id']
        sessionStorage[user_id]['factID'] += 1
        if sessionStorage[user_id]['factID'] == len(facts):
            sessionStorage[user_id]['factID'] = 0
            res['response']['text'] += '\n–ù–∞—à–∏ —Ñ–∞–∫—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã, –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ!'
        else:
            res['response']['buttons'].append({'title': '–î–∞–ª—å—à–µ', 'hide': True})
        res['response']['buttons'].append({'title': '–ú–µ–Ω—é', 'hide': True})

    elif sessionStorage[user_id]['mode'] == '–≤–æ–π–Ω–∞':
        res['response']['buttons'] = []
        if '–Ω–∞–∑–∞–¥' in req['request']['original_utterance'].lower():
            sessionStorage[user_id]['ww2_id'] -= 1
        if '–¥–∞–ª–µ–µ' in req['request']['original_utterance'].lower():
            sessionStorage[user_id]['ww2_id'] += 1
        res['response']['text'] = sessionStorage[user_id]['ww2'][sessionStorage[user_id]['ww2_id']]['text']
        if sessionStorage[user_id]['ww2'][sessionStorage[user_id]['ww2_id']]['tts'] != '':
            res['response']['tts'] = sessionStorage[user_id]['ww2'][sessionStorage[user_id]['ww2_id']]['tts']
        if sessionStorage[user_id]['ww2'][sessionStorage[user_id]['ww2_id']]['pic_id'] != '':
            res['response']['card'] = {}
            res['response']['card']['type'] = 'BigImage'
            res['response']['card']['title'] = sessionStorage[user_id]['ww2'][sessionStorage[user_id]['ww2_id']][
                'title']
            res['response']['card']['image_id'] = \
                sessionStorage[user_id]['ww2'][sessionStorage[user_id]['ww2_id']][
                    'pic_id']
        if sessionStorage[user_id]['ww2_id'] == len(sessionStorage[user_id]['ww2']) - 1:
            res['response']['buttons'] = []
            res['response']['text'] += '–ò—Å—Ç–æ—Ä–∏—è –≤–æ–π–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã'
            res['response']['buttons'] = [
                {'title': '–ù–∞–∑–∞–¥', 'hide': True},
                {'title': '–ú–µ–Ω—é', 'hide': True},
            ]
            return
        if sessionStorage[user_id]['ww2_id'] == 0:
            res['response']['buttons'] = []
            res['response']['buttons'] = [
                {'title': '–î–∞–ª–µ–µ', 'hide': True},
                {'title': '–ú–µ–Ω—é', 'hide': True},
            ]
            return

        res['response']['buttons'] = [
            {'title': '–ù–∞–∑–∞–¥', 'hide': True},
            {'title': '–î–∞–ª–µ–µ', 'hide': True},
            {'title': '–ú–µ–Ω—é', 'hide': True},
        ]
    else:
        res['response']['buttons'] = [
            {'title': suggest, 'hide': False}
            for suggest in sessionStorage[user_id]['suggests'][:3]
        ]
        res['response']['buttons'].append({'title': '–†–µ–π—Ç–∏–Ω–≥ üèÜ', 'hide': False,
                                           'url': 'https://alice-skills-1--t1logy.repl.co/records'})
        res['response']['buttons'].append({'title': '–£—Ä–æ–≤–µ–Ω—å üí™üèª', 'hide': False})
        res['response']['buttons'].append({'title': '–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–≤—ã–∫ ‚ùå', 'hide': False})
        res['response']['text'] = f"{random.choice(wtf)}\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö :)"
    return


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–æ—á–∫–æ–≤" –≤ —Ä–µ–∂–∏–º–µ "–£—Ä–æ–≤–µ–Ω—å"
def count_naming(level, summa):
    if level - summa >= 1:
        return '–æ—á–∫–æ'
    if 2 <= level - summa < 5:
        return '–æ—á–∫–∞'
    if 5 <= level - summa <= 20:
        return '–æ—á–∫–æ–≤'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ —ç–∫—Ä–∞–Ω–∞ (–Ø.–°—Ç–∞–Ω—Ü–∏—è, –Ø.–ù–∞–≤–∏–≥–∞—Ç–æ—Ä)
def station_dialog(req, res):
    user_id = req['session']['user_id']
    if res['response']['end_session'] is True:
        write_in_base(user_id)
    if req['session']['new']:
        config(user_id)
        try:
            # con = sqlite3.connect("users.db")
            # cur = con.cursor()
            # user = cur.execute(f"SELECT * FROM u WHERE nick = '{req['state']['user']['nick']}';").fetchone()
            if not 'cul_count' in req['state']['user']:
                sessionStorage[user_id]['cul_count'] = 0
            else:
                sessionStorage[user_id]['cul_count'] = req['state']['user']['cul_count']
            res['response']['text'] = \
                f"{random.choice(hey)}, {req['state']['user']['nick']}! –ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! " \
                f"–¢–≤–æ–∏ –æ—á–∫–∏:\n–î–∞—Ç—ã: {req['state']['user']['test_count']}\n–ö–∞—Ä—Ç–∏–Ω—ã: {req['state']['user']['pic_count']}\n" \
                f"–ö—É–ª—å—Ç—É—Ä–∞: {sessionStorage[user_id]['cul_count']}\n–í " \
                f"–∫–∞–∫–æ–π —Ä–µ–∂–∏–º —Ç—ã —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å: –¥–∞—Ç—ã, —Ç–µ—Ä–º–∏–Ω—ã –∏–ª–∏ –ø–æ—Å–ª—É—à–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã?"
            sessionStorage[user_id]['nick'] = req['state']['user']['nick']
            sessionStorage[user_id]['test_count'] = req['state']['user']['test_count']
            sessionStorage[user_id]['pic_count'] = req['state']['user']['pic_count']

        except Exception:
            res['response'][
                'text'] = '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Å–≤–µ–∂–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏. –¢–∞–∫ –∫–∞–∫ —É —Ç–µ–±—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ' \
                          '–±–µ–∑ —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä, —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ 4 —Ä–µ–∂–∏–º–∞. ' \
                          '–°–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:'
        return

    if sessionStorage[user_id]['nick'] is None:
        tag = str(random.randint(0, 10001))
        if len(req['request']['original_utterance']) > 30:
            res['response']['text'] = '–í–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ.'
        else:
            new_nick = req['request']['original_utterance'] + "#" + tag
            if sessionStorage[user_id]['want_to_change_nick']:
                con = psycopg2.connect(user="cbbdrghpynreoq",
                                       password="97ef09f2e8c1be408a28e5bcef9597dbd01dc8b75be2c364b540f3f1e1c51d7c",
                                       host="ec2-54-75-246-118.eu-west-1.compute.amazonaws.com",
                                       port="5432",
                                       database="d7m2s796gtnbj0")
                cur = con.cursor()
                print(new_nick, sessionStorage[user_id]['nick'])
                cur.execute(f"UPDATE u SET nick = '{new_nick}' WHERE nick = '{sessionStorage[user_id]['nick']}'")
                con.commit()
                con.close()
                sessionStorage[user_id]['want_to_change_nick'] = False
            sessionStorage[user_id]['nick'] = new_nick
        res['response']['text'] = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n' \
                                  '–£ –º–µ–Ω—è –µ—Å—Ç—å 4 —Ä–µ–∂–∏–º–∞: –¥–∞—Ç—ã, –≥–¥–µ —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö ' \
                                  '—Å–æ–±—ã—Ç–∏—è—Ö, –∏ –≤–æ–π–Ω–∞, –≥–¥–µ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω–µ. ' \
                                  '–†–µ–∂–∏–º —Ç–µ—Ä–º–∏–Ω—ã –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –≤ –ï–ì–≠.–ò–ª–∏ —Ç—ã ' \
                                  '–º–æ–∂–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã. –í–æ —á—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–∏–≥—Ä–∞–µ–º? –ï—Å–ª–∏ —Ç—ã ' \
                                  '—á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏: "–ø–æ–º–æ—â—å". '

        res['user_state_update'] = {
            'nick': sessionStorage[user_id]['nick']
        }
        return
    if res['response']['end_session'] is True:
        write_in_base(user_id)
        res['user_state_update'] = {
            'nick': sessionStorage[user_id]['nick']
        }
        # config(user_id) # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—Ç –∑–∞–Ω–æ–≤–æ –∏–≥—Ä–∞—Ç—å –ë–ï–ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–≤—ã–∫–∞
        return
    if '–¥–∞—Ç—ã' in req['request']['original_utterance'].lower() or '–¥–∞ —Ç—ã' in req['request']['original_utterance'].lower() \
            or '–¥–∞—Ç–∞' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã'
    if '—Ç–µ—Ä–º–∏–Ω—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Ç–µ—Ä–º–∏–Ω—ã'
    if '—Ñ–∞–∫—Ç—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Ñ–∞–∫—Ç—ã'
        sessionStorage[user_id]['factID'] = 0
        fact = copy.deepcopy(facts)
        random.shuffle(fact)
        sessionStorage[user_id]['facts'] = fact
    if '–≤–æ–π–Ω–∞' in req['request']['original_utterance'].lower() or '–≤–æ–π–Ω—É' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['ww2_id'] = 0
        ww2 = copy.deepcopy(war)
        sessionStorage[user_id]['ww2'] = ww2
        sessionStorage[user_id]['mode'] = '–≤–æ–π–Ω–∞'

    if '–ø–æ–º–æ—â—å' in req['request']['original_utterance'].lower() or '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å' in req['request'][
        'original_utterance'].lower():
        res['response'][
            'text'] = '–£ –º–µ–Ω—è –µ—Å—Ç—å 4 —Ä–µ–∂–∏–º–∞: –¥–∞—Ç—ã, –≥–¥–µ —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, ' \
                      '–∏ –≤–æ–π–Ω–∞, –≥–¥–µ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω–µ. ' \
                      '–†–µ–∂–∏–º —Ç–µ—Ä–º–∏–Ω—ã –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –≤ –ï–ì–≠. –ò–ª–∏ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ ' \
                      '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã. –í–æ —á—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–∏–≥—Ä–∞–µ–º? '
        sessionStorage[user_id]['mode'] = ''
        return
    if sessionStorage[user_id]['mode'] == '—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã':
        if not sessionStorage[user_id]['lastQ']:
            res['response']['text'] = sessionStorage[user_id]['test'][sessionStorage[user_id]['id']]['question']
            sessionStorage[user_id]['lastQ'] = True
        else:
            res['response']['text'] = sessionStorage[user_id]['test'][sessionStorage[user_id]['id']]['question']
            user_answer = req['request']['command'].lower()
            right_answer = sessionStorage[user_id]['test'][sessionStorage[user_id]['id'] - 1]['answer'].lower().split(
                '/')
            years = right_answer[0].split(' ')
            centuries = right_answer[1].split(' ')

            print(years, centuries)
            print(user_answer)
            if '–≤–µ–∫' not in user_answer:
                if len(years) > 1:  # –µ—Å–ª–∏ —É –Ω–∞—Å 2 –≥–æ–¥–∞
                    if years[0] in user_answer and years[1] in user_answer:
                        res['response'][
                            'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                        sessionStorage[user_id]['test_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ –¥–∞—Ç–∞–º
                        res['user_state_update'] = write_in_state(user_id)
                        write_in_base(user_id)
                    else:
                        word = alice_reaction_to_dont_know_or_wrong_answer(user_answer)
                        res['response']['text'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                                                  f"—Å {years[0]} –≥–æ–¥ –ø–æ {years[1]} –≥–æ–¥. \n{random.choice(_next)}: {res['response']['text']}"
                    print(years[0] in user_answer, years[1] in user_answer)
                else:  # –µ—Å–ª–∏ 1 –≥–æ–¥
                    if years[0] in user_answer:
                        res['response'][
                            'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                        sessionStorage[user_id]['test_count'] += 1
                        res['user_state_update'] = write_in_state(user_id)
                        write_in_base(user_id)
                    else:
                        word = alice_reaction_to_dont_know_or_wrong_answer(user_answer)
                        res['response'][
                            'text'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                                      f"–≤ {years[0]} –≥–æ–¥—É. \n{random.choice(_next)}: {res['response']['text']}"
            else:
                if len(centuries) == 2:  # –æ–¥–∏–Ω –≤–µ–∫ + —Å–ª–æ–≤–æ "–≤–µ–∫"
                    if centuries[0] in user_answer and centuries[1] in user_answer:
                        res['response'][
                            'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                        sessionStorage[user_id]['test_count'] += 0.5
                        res['user_state_update'] = write_in_state(user_id)
                        write_in_base(user_id)

                    else:
                        word = alice_reaction_to_dont_know_or_wrong_answer(user_answer)
                        res['response']['text'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                                                  f"–≤ {centuries[0]}-–æ–º –≤–µ–∫–µ \n{random.choice(_next)}: {res['response']['text']}"
                else:
                    if centuries[0] in user_answer and centuries[1] in user_answer and centuries[2] in user_answer:
                        res['response'][
                            'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                        sessionStorage[user_id]['test_count'] += 0.5
                        res['user_state_update'] = write_in_state(user_id)
                        write_in_base(user_id)
                    else:
                        word = alice_reaction_to_dont_know_or_wrong_answer(user_answer)
                        res['response']['text'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                                                  f"—Å {centuries[0]}-—ã–π –≤–µ–∫ –ø–æ {centuries[1]}-—ã–π –≤–µ–∫ \n{random.choice(_next)}: {res['response']['text']}"
        sessionStorage[user_id]['id'] += 1
        if sessionStorage[user_id]['id'] == len(sessionStorage[user_id]['test']):
            sessionStorage[user_id]['id'] = 0
            random.shuffle(sessionStorage[user_id]['test'])

    elif sessionStorage[user_id]['mode'] == '—Ñ–∞–∫—Ç—ã':
        res['response']['text'] = ''
        res['response']['tts'] = ''
        if sessionStorage[user_id]['factID'] == 0:
            res['response']['text'] = '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–∫—Ç—É, —Å–∫–∞–∂–∏ –¥–∞–ª–µ–µ. '
        res['response']['text'] += sessionStorage[user_id]['facts'][sessionStorage[user_id]['factID']]['fact']
        res['response']['tts'] = sessionStorage[user_id]['facts'][sessionStorage[user_id]['factID']]['tts']
        sessionStorage[user_id]['factID'] += 1
        if sessionStorage[user_id]['factID'] == len(facts):
            sessionStorage[user_id]['factID'] = 0
            res['response']['text'] += '\n–ù–∞—à–∏ —Ñ–∞–∫—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã, –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ!'
            res['response']['tts'] = res['response']['text']
    elif sessionStorage[user_id]['mode'] == '—Ç–µ—Ä–º–∏–Ω—ã':
        if not sessionStorage[user_id]['lastT']:
            res['response']['text'] = sessionStorage[user_id]['term'][sessionStorage[user_id]['terID']]['question']
            sessionStorage[user_id]['lastT'] = True
        else:
            res['response']['text'] = sessionStorage[user_id]['term'][sessionStorage[user_id]['terID']]['question']
            for ans in sessionStorage[user_id]['term'][sessionStorage[user_id]['terID'] - 1][
                'answer'].lower().split(
                '/'):
                if ans in req['request']['original_utterance'].lower():
                    res['response'][
                        'text'] = f"{random.choice(right)} {random.choice(_next)}: {res['response']['text']}"
                    sessionStorage[user_id]['ter_count'] += 1  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º
                    res['user_state_update'] = write_in_state(user_id)
                    write_in_base(user_id)
                    break
            else:
                word = alice_reaction_to_dont_know_or_wrong_answer(req['request']['original_utterance'].lower())
                res['response'][
                    'text'] = f"{word} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " \
                    f"{sessionStorage[user_id]['term'][sessionStorage[user_id]['terID'] - 1]['answer']}. \n" \
                    f"{random.choice(_next)}: {res['response']['text']}"
        sessionStorage[user_id]['terID'] += 1
        if sessionStorage[user_id]['terID'] == len(sessionStorage[user_id]['term']):
            random.shuffle(sessionStorage[user_id]['term'])
            sessionStorage[user_id]['terID'] = 0
    elif sessionStorage[user_id]['mode'] == '–≤–æ–π–Ω–∞':
        res['response']['buttons'] = []
        if '–Ω–∞–∑–∞–¥' in req['request']['original_utterance'].lower():
            sessionStorage[user_id]['ww2_id'] -= 1
        if '–¥–∞–ª–µ–µ' in req['request']['original_utterance'].lower():
            sessionStorage[user_id]['ww2_id'] += 1
        res['response']['text'] = sessionStorage[user_id]['ww2'][sessionStorage[user_id]['ww2_id']]['text']
        if sessionStorage[user_id]['ww2'][sessionStorage[user_id]['ww2_id']]['tts'] != '':
            res['response']['tts'] = sessionStorage[user_id]['ww2'][sessionStorage[user_id]['ww2_id']]['tts']
        if sessionStorage[user_id]['ww2_id'] == len(sessionStorage[user_id]['ww2']) - 1:
            res['response']['buttons'] = []
            res['response']['text'] += '–ò—Å—Ç–æ—Ä–∏—è –≤–æ–π–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã'
            res['response']['buttons'] = [
                {'title': '–ù–∞–∑–∞–¥', 'hide': True},
                {'title': '–ú–µ–Ω—é', 'hide': True},
            ]
            return
        if sessionStorage[user_id]['ww2_id'] == 0:
            res['response']['buttons'] = []
            res['response']['buttons'] = [
                {'title': '–î–∞–ª–µ–µ', 'hide': True},
                {'title': '–ú–µ–Ω—é', 'hide': True},
            ]
            return
    else:
        res['response'][
            'text'] = f'–í –∫–∞–∫–æ–π —Ä–µ–∂–∏–º —Ç—ã —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å: –¥–∞—Ç—ã, —Ç–µ—Ä–º–∏–Ω—ã, –≤–æ–π–Ω—É –∏–ª–∏ –ø–æ—Å–ª—É—à–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ ' \
                      f'—Ñ–∞–∫—Ç—ã? '
    res['response']['buttons'] = [
        {'title': '–ü–æ–º–æ—â—å', 'hide': True}
    ]
    return


if __name__ == '__main__':
    #keep_alive()
    from flask_ngrok import run_with_ngrok
    run_with_ngrok(app)
    app.run()
    # app.run()
